# Generated by Django 5.0.2 on 2024-06-03 13:28

import django.contrib.auth.models    # Importing user-related models
import django.contrib.auth.validators   # Validators for user fields like username
import django.utils.timezone    # Utilities for working with time zones
from django.db import migrations, models    # Base classes for migrations and field types


class Migration(migrations.Migration):

    initial = True    # Indicates that this is the first migration for the application

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Feedback',
            fields=[
                # Auto-generated primary key for the model
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                # Name field to store the feedback submitter's name
                ('name', models.CharField(max_length=100)),
                # Email field to store the submitter's email address
                ('email', models.EmailField(max_length=254)),
                # Age field to store the submitter's age
                ('age', models.IntegerField()),
                # Comment field to store feedback text
                ('comment', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                # Auto-generated primary key for the user model
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                # Password field for storing hashed passwords
                ('password', models.CharField(max_length=128, verbose_name='password')),
                # Last login timestamp for the user
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                 # Boolean indicating if the user has superuser privileges
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                # Username field with validation and uniqueness constraints
                ('username', models.CharField(
                    error_messages={'unique': 'A user with that username already exists.'},
                    help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
                    max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                    verbose_name='username')),
                # Optional first name field
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                # Optional last name field
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                # Optional email field
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                # Boolean indicating if the user is a staff member
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                # Boolean indicating if the user account is active
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                # Timestamp for when the user joined
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                # Many-to-many relationship to groups the user belongs to
                ('groups', models.ManyToManyField(
                    blank=True,
                    help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                    related_name='user_set',
                    related_query_name='user',
                    to='auth.group',
                    verbose_name='groups'
                )),
                # Many-to-many relationship for user-specific permissions
                ('user_permissions', models.ManyToManyField(
                    blank=True,
                    help_text='Specific permissions for this user.',
                    related_name='user_set',
                    related_query_name='user',
                    to='auth.permission',
                    verbose_name='user permissions'
                )),
            ],
            options={
                # Metadata for the CustomUser model
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                # Assigns Django's default UserManager for managing users
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
